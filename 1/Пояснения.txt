1. Добейтесь корректной работы вашего сервера. Тщательно повторите шаги, которые мы делали на уроке. В случае затруднений - обращайтесь в чат поддержки!
Сделано
2. Добавьте себе в закладки официальный мануал по языку http:fi2.php.net/manual/ru/
Сделано
3. Изучение var-dump
var_dump(3/1); //int(3)
var_dump(1/3); //float(0.33333333333333)
var_dump('20cats' + 40); //int(60)
var_dump(18 % 4); //int(2)
4. Говорят, что в PHP "всё является выражением". Интересно, что даже присваивание переменной какого-либо значения тоже является выражением! Изучите примеры ниже и дайте ответ - что же является значением выражения присваивания?
echo ($a = 2);  //значение выражения присваивания будет 2
$x = ($y = 12) - 8; echo $x;  //Значение всего выражения будет 4, а значение присваивания ($y = 12) будет 12
Присваивание является выражением, значением этого выражения будет результат (само значение, которое присвоили)
5.
var_dump(1 == 1.0);  //true, так как сначала сработало приведение типов и 1.0 привелось к int
var_dump(1 === 1.0);  //false - разный тип данных
var_dump('02' == 2);  //true - '02' преобразовалось в int
var_dump('02' === 2);  //false - разные типы
var_dump('02' == '2'); //true - обе строки преобразовались в int и затем сравнились
6.
$x = true xor true;
var_dump($x);  //true
var_dump(true xor true);  //false

 Сначала выполнилось присваивание, значение присваивания и выводится уже в поток
 Для того, чтобы переменной $x присвоился результат выражения true xor true , нужно заключить его в скобки, чтобы правильно расставить приоритеты
$x = (true xor true);
var_dump($x);  //false
 Получается у оператора присваивания приоритет больше чем у XOR
